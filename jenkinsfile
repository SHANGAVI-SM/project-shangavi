pipeline {
    agent any

    environment {
        DEV_REPO_URL = 'https://github.com/SHANGAVI-SM/project-shangavi.git'
        MASTER_REPO_URL = 'https://github.com/rvsp/reactjs-demo.git'
        dockerHubRegistry = 'docker.io'
        devdockerHubRepository = 'shangavism/dev'
        prodDockerHubRepository = 'shangavism/prod'
        dockerImageName = 'capstone-image'
        dockerImageTag = 'latest'
    }

    stages {
        stage('Checkout Dev Repo') {
    
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/dev']], doGenerateSubmoduleConfigurations: false, extensions: [], userRemoteConfigs: [[url: DEV_REPO_URL]]])
            }
        }
        stage('Build and Push Dev Docker Image') {
            steps {
                script {
                    sh "chmod +x -R ${env.WORKSPACE}"
                    sh './build.sh'
                    withCredentials([usernamePassword(credentialsId: 'docker', usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                        sh "docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD"
                        sh "docker tag ${dockerImageName}:${dockerImageTag} ${dockerHubRegistry}/${devdockerHubRepository}:${dockerImageTag}"
                        sh "docker push ${dockerHubRegistry}/${devdockerHubRepository}:${dockerImageTag}"
                    }
                }
            }
        }
        stage('Build and Push Prod Docker Image') {
            when {
                changeset 'refs/heads/dev:refs/heads/master'
            }
            steps {
                script {
                    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], userRemoteConfigs: [[url: MASTER_REPO_URL]]])
                    sh "chmod +x -R ${env.WORKSPACE}"
                    sh './build.sh'
                    sh "docker tag ${dockerImageName}:${dockerImageTag} ${dockerHubRegistry}/${prodDockerHubRepository}:${dockerImageTag}"
                    sh "docker push ${dockerHubRegistry}/${prodDockerHubRepository}:${dockerImageTag}"
                }
            }
        }
        stage('Deploy the application') {
            steps {
                script {
                    
                    def  AWS_REGION = 'ap-south-1'
                    def AWS_ACCESS_KEY_ID = credentials('awsconsole')
                    def AWS_SECRET_ACCESS_KEY = credentials('aws-key')
                    def DOCKER_IMAGE_NAME = 'your_docker_image_name'
                    def EC2_INSTANCE_IP = '15.206.94.151'
                    def EC2_INSTANCE_USERNAME = 'application server'
                    def EC2_INSTANCE_SSH_KEY = credentials('deploymentseerver-privatekey')
    
                    sshagent(['your_ec2_instance_ssh_key']) {
                        sh "ssh -o StrictHostKeyChecking=no -i $EC2_INSTANCE_SSH_KEY $EC2_INSTANCE_USERNAME@$EC2_INSTANCE_IP 'docker pull $dockerImageName:$dockerImageTag'"
                        sh "ssh -o StrictHostKeyChecking=no -i $EC2_INSTANCE_SSH_KEY $EC2_INSTANCE_USERNAME@$EC2_INSTANCE_IP 'docker stop shangavi || true && docker rm shangavi || true'"
                        sh "ssh -o StrictHostKeyChecking=no -i $EC2_INSTANCE_SSH_KEY $EC2_INSTANCE_USERNAME@$EC2_INSTANCE_IP 'docker run -d --name shangavi -p 80:80 $dockerImageName:$dockerImageTag'"
                    //sh "chmod +x -R ${env.WORKSPACE}"
                    // sh './deploy.sh'
                    }
                }
            }
        }
    }
}
